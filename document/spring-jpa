Java Persistence API 负责制定协议，Hibernate 负责实现逻辑，Spring Data JPA 负责封装和使用
乐观锁：实际开发过程中很常用，它没有加锁、没有阻塞，在多线程环境以及高并发的情况下 CPU 的利用率是最高的，吞吐量也是最大的
JPA中乐观锁的实现方法：JPA 协议规定，想要实现乐观锁可以通过 @Version 注解标注在某个字段上面，并且可以持久化到 DB 即可
支持的数据类型：
    1.int&Integer
    2.short&Short
    3.long&Long
    4.java.sql.Timestamp

PathVariableMapMethodArgumentResolver 专门解析 @PathVariable 里面的值；

RequestResponseBodyMethodProcessor 专门解析带 @RequestBody 注解的方法参数的值；

RequestParamMethodArgumentResolver 专门解析 @RequestParam 的注解参数的值，当方法的参数中没有任何注解的时候，默认是 @RequestParam；


参考WrapWithData这一部分，
 /* 拦截器配置 */

void addInterceptors(InterceptorRegistry var1);

/* 视图跳转控制器 */

void addViewControllers(ViewControllerRegistry registry);

/**

  *静态资源处理

**/

void addResourceHandlers(ResourceHandlerRegistry registry);

/* 默认静态资源处理器 */

void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);

/**

  *这里配置视图解析器

 **/

void configureViewResolvers(ViewResolverRegistry registry);

/* 配置内容裁决的一些选项*/

void configureContentNegotiation(ContentNegotiationConfigurer configurer);
/** 解决跨域问题 **/
void addCorsMappings(CorsRegistry registry) ;

/** 添加都会contoller的Return的结果的处理 **/

void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers)；


数据库连接池：
通过 getConnection 方法里面的代码可以看到 HikariPool 的用法，也就是说，我们是通过连接池来获得连接的，这个连接用过之后没有断开，
而是重新放回到连接池里面（这个地方你一定要谨记，它也说明了 connection 是可以共享的）。

**数据源和 driver（驱动）、数据库连接、连接池的关系：
    数据源的作用是给应用程序提供不同 DB 的连接 connection；

    连接是通过连接池获取的，这主要是出于连接性能的考虑；

    创建好连接之后，通过数据库的驱动来进行数据库操作；

    而不同的 DB（MySQL / h2 / oracle），都有自己的驱动类和相应的驱动 Jar 包。

https://github.com/brettwooldridge/HikariCP hikariCP详细配置


日志相关有用配置
### 日志级别的灵活运用

## hibernate相关

# 显示sql的执行日志，如果开了这个,show_sql就可以不用了

logging.level.org.hibernate.SQL=debug

# hibernate id的生成日志

logging.level.org.hibernate.id=debug

# hibernate所有的操作都是PreparedStatement，把sql的执行参数显示出来

logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# sql执行完提取的返回值

logging.level.org.hibernate.type.descriptor.sql=trace

# 请求参数

logging.level.org.hibernate.type=debug

# 缓存相关

logging.level.org.hibernate.cache=debug

# 统计hibernate的执行状态

logging.level.org.hibernate.stat=debug

# 查看所有的缓存操作

logging.level.org.hibernate.event.internal=trace

logging.level.org.springframework.cache=trace

# hibernate 的监控指标日志

logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=DEBUG

### 连接池的相关日志

## hikari连接池的状态日志，以及连接池是否完好 #连接池的日志效果：HikariCPPool - Pool stats (total=20, active=0, idle=20, waiting=0)

logging.level.com.zaxxer.hikari=TRACE

#开启 debug可以看到 AvailableSettings里面的默认配置的值都有哪些，会输出类似下面的日志格式

# org.hibernate.cfg.Settings               : Statistics: enabled

# org.hibernate.cfg.Settings               : Default batch fetch size: -1

logging.level.org.hibernate.cfg=debug

#hikari数据的配置项日志

logging.level.com.zaxxer.hikari.HikariConfig=TRACE

### 查看事务相关的日志，事务获取，释放日志

logging.level.org.springframework.orm.jpa=DEBUG

logging.level.org.springframework.transaction=TRACE

logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG

### 分析connect 以及 orm和 data的处理过程更全的日志

logging.level.org.springframework.data=trace

logging.level.org.springframework.orm=trace


Persistence Context 相关的核心概念
PersistenceContext，它是用来管理会话里面的 Entity 状态的一个上下文环境，使 Entity 的实例有了不同的状态，也就是我们所说的实体实例的生命周期
1.PersistenceContext 是持久化上下文，是 JPA 协议定义的，而 Hibernate 的实现是通过 Session 创建和销毁的，也就是说一个 Session 有且仅有一个 PersistenceContext；
2.PersistenceContext 既然是持久化上下文，里面管理的是 Entity 的状态；
3.EntityManager 是通过 PersistenceContext 创建的，用来管理 PersistenceContext 中 Entity 状态的方法，离开 PersistenceContext 持久化上下文，EntityManager 没有意义；
4.EntityManger 是操作对象的唯一入口，一个请求里面可能会有多个 EntityManger 对象

spring jpa中的session
可以狭隘的理解成EntityManager，因为其对jpa的任何操作都是通过entitymanager的接口进行的

SessionImpl 的源码和 Structure 的视图，可以得出如下结论。

    SessionImpl 是 EntityManager 的实现类，那么肯定实现了 JPA 协议规定的 EntityManager 的所有功能。
    实现 PersistenceContext 对象实例化的过程，使得 PersistenceContext 生命周期就是 Session 的生命周期。
所以我们可以抽象地理解为，Sesession 是对一些数据库的操作，需要放在同一个上下文的集合中，就是我们常说的一级缓存。
    Session 有 open 的话，那么肯定有 close。open 的时候做了“是否开启事务”“是否获取连接”等逻辑；close 的时候做了“是否关闭事务”“释放连接”等动作；
    Session 的任何操作都离不开事务和连接，那么肯定用当前线程保存了这些资源。

Session、EntityManager、Connection 和 Transaction 的关系
Connection 和 Transaction 的关系
事务是建立在 Connection 之上的，没有连接就没有事务。
以 MySQL InnoDB 为例，新开一个连接默认开启事务，默认每个 SQL 执行完之后自动提交事务。
一个连接里面可以有多次串行的事务段；一个事务只能属于一个 Connection。
事务与事务之间是相互隔离的，那么自然不同连接的不同事务也是隔离的。

EntityManager、Connection 和 Transaction 的关系
EntityManager 里面有 DataSource，当 EntityManager 里面开启事务的时候，先判断当前线程里面是否有数据库连接，如果有直接用。
开启事务之前先开启连接；关闭事务，不一定关闭连接。
开启 EntityManager，不一定立马获得连接；获得连接，不一定立马开启事务。
关闭 EntityManager，一定关闭事务，释放连接；反之不然。

Session、EntityManager、Connection 和 Transaction 的关系
Session 是 EntityManager 的子类，SessionImpl 是 Session 和 EntityManager 的实现类。那么自然 EntityManager 和 Connection、Transaction 的关系同样适用 Session、EntityManager、Connection 和 Transaction 的关系。
Session 的生命周期决定了 EntityManager 的生命周期。
Session 和 Transaction 的关系
在 Hibernate 的 JPA 实现里面，开启 Transaction 之前，必须要先开启 Session。
默认情况下，Session 的生命周期由 open-in-view 决定是请求之前开启，还是事务之前开启。
事务关闭了，Session 不一定关闭。
Session 关闭了，事务一定关闭。


 Lazy 异常
 Lazy 异常的常见场景与解决方法
 场景一：跨事务，事务之外的场景
    解决办法
    第一种方式：简单粗暴地设置为 spring.jpa.open-in-view=true
    第二种方式：也是简单粗暴改成 Eager 模式(   @OneToMany(fetch = FetchType.EAGER)),但是会带来性能的浪费
    第三种方式：将可能发生 Lazy 的操作和取数据放在同一个事务里面
    *（最有效最好）第四种方式：Service 层之外都用 DTO 或者其他 POJO，而不是 Entity
场景二：异步线程的时候
场景三：Controller 直接返回实体也会产生 Lazy Exception
场景四：自定义的拦截器和 filter 中无意的 toString 操作


经典的 N+1 SQL 问题
所谓的 N+1 的 SQL，当我们查询主体信息时候，1 条 SQL 会衍生出来关联关系的 N 条 SQL。
# 更改批量取数据的大小为20
spring.jpa.properties.hibernate.default_batch_fetch_size= 20
