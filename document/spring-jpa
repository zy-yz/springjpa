Java Persistence API 负责制定协议，Hibernate 负责实现逻辑，Spring Data JPA 负责封装和使用
乐观锁：实际开发过程中很常用，它没有加锁、没有阻塞，在多线程环境以及高并发的情况下 CPU 的利用率是最高的，吞吐量也是最大的
JPA中乐观锁的实现方法：JPA 协议规定，想要实现乐观锁可以通过 @Version 注解标注在某个字段上面，并且可以持久化到 DB 即可
支持的数据类型：
    1.int&Integer
    2.short&Short
    3.long&Long
    4.java.sql.Timestamp

PathVariableMapMethodArgumentResolver 专门解析 @PathVariable 里面的值；

RequestResponseBodyMethodProcessor 专门解析带 @RequestBody 注解的方法参数的值；

RequestParamMethodArgumentResolver 专门解析 @RequestParam 的注解参数的值，当方法的参数中没有任何注解的时候，默认是 @RequestParam；


参考WrapWithData这一部分，
 /* 拦截器配置 */

void addInterceptors(InterceptorRegistry var1);

/* 视图跳转控制器 */

void addViewControllers(ViewControllerRegistry registry);

/**

  *静态资源处理

**/

void addResourceHandlers(ResourceHandlerRegistry registry);

/* 默认静态资源处理器 */

void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);

/**

  *这里配置视图解析器

 **/

void configureViewResolvers(ViewResolverRegistry registry);

/* 配置内容裁决的一些选项*/

void configureContentNegotiation(ContentNegotiationConfigurer configurer);
/** 解决跨域问题 **/
void addCorsMappings(CorsRegistry registry) ;

/** 添加都会contoller的Return的结果的处理 **/

void addReturnValueHandlers(List<HandlerMethodReturnValueHandler> handlers)；


数据库连接池：
通过 getConnection 方法里面的代码可以看到 HikariPool 的用法，也就是说，我们是通过连接池来获得连接的，这个连接用过之后没有断开，
而是重新放回到连接池里面（这个地方你一定要谨记，它也说明了 connection 是可以共享的）。

**数据源和 driver（驱动）、数据库连接、连接池的关系：
    数据源的作用是给应用程序提供不同 DB 的连接 connection；

    连接是通过连接池获取的，这主要是出于连接性能的考虑；

    创建好连接之后，通过数据库的驱动来进行数据库操作；

    而不同的 DB（MySQL / h2 / oracle），都有自己的驱动类和相应的驱动 Jar 包。

https://github.com/brettwooldridge/HikariCP hikariCP详细配置


日志相关有用配置
### 日志级别的灵活运用

## hibernate相关

# 显示sql的执行日志，如果开了这个,show_sql就可以不用了

logging.level.org.hibernate.SQL=debug

# hibernate id的生成日志

logging.level.org.hibernate.id=debug

# hibernate所有的操作都是PreparedStatement，把sql的执行参数显示出来

logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# sql执行完提取的返回值

logging.level.org.hibernate.type.descriptor.sql=trace

# 请求参数

logging.level.org.hibernate.type=debug

# 缓存相关

logging.level.org.hibernate.cache=debug

# 统计hibernate的执行状态

logging.level.org.hibernate.stat=debug

# 查看所有的缓存操作

logging.level.org.hibernate.event.internal=trace

logging.level.org.springframework.cache=trace

# hibernate 的监控指标日志

logging.level.org.hibernate.engine.internal.StatisticalLoggingSessionEventListener=DEBUG

### 连接池的相关日志

## hikari连接池的状态日志，以及连接池是否完好 #连接池的日志效果：HikariCPPool - Pool stats (total=20, active=0, idle=20, waiting=0)

logging.level.com.zaxxer.hikari=TRACE

#开启 debug可以看到 AvailableSettings里面的默认配置的值都有哪些，会输出类似下面的日志格式

# org.hibernate.cfg.Settings               : Statistics: enabled

# org.hibernate.cfg.Settings               : Default batch fetch size: -1

logging.level.org.hibernate.cfg=debug

#hikari数据的配置项日志

logging.level.com.zaxxer.hikari.HikariConfig=TRACE

### 查看事务相关的日志，事务获取，释放日志

logging.level.org.springframework.orm.jpa=DEBUG

logging.level.org.springframework.transaction=TRACE

logging.level.org.hibernate.engine.transaction.internal.TransactionImpl=DEBUG

### 分析connect 以及 orm和 data的处理过程更全的日志

logging.level.org.springframework.data=trace

logging.level.org.springframework.orm=trace

